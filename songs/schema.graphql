type Query {
  user: UserType
  songs(page: Int, q: String, ordering: [String]): SongsPaginatedType
  songsIndex: [SongIndexType]
  song(spotifyId: String!): SongType
  artists(page: Int, q: String, ordering: [String]): ArtistsPaginatedType
  artist(name: String!): ArtistType
  writers(page: Int, q: String, ordering: [String]): WritersPaginatedType
  writer(id: Int!): WriterType
  tagsByCategory(category: String!): [TagType]
}

type UserType {
  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
}

type SongsPaginatedType {
  items: [SongType]
  page: Int
  pages: Int
  total: Int
  hasNext: Boolean
  hasPrev: Boolean
  q: String
}

type SongType {
  title: String!
  spotifyId: String!
  id: ID!
  isNew: Boolean!
  artists: [ArtistType!]!
  writers: [WriterType!]!
  tags: [TagType!]!
  lyrics: String
  rhymesRaw: String
  jaxstaId: String
  youtubeId: String
  audioFile: String
  metadata: GenericScalar
  created: DateTime!
  updated: DateTime
  taggedTexts: [TaggedTextType!]!
  spotifyUrl: String
  spotifyPlayer: String
  jaxstaUrl: String
  youtubeUrl: String
  youtubePlayer: String
  audioFileUrl: String
  attachments: [AttachmentType]
}

type ArtistType {
  name: String!
  songs: [SongType!]!
}

type WriterType {
  id: ID!
  name: String!
  altNames: [String]
  songs: [SongType!]!
  songCt: Int
}

type TagType {
  value: String!
  label: String!
  texts: [TaggedTextType!]!
  songs: [SongType!]!
}

type TaggedTextType {
  tag: TagType!
  text: String!
  song: SongType
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type AttachmentType {
  attachmentType: String!
  url: String
}

type SongIndexType {
  title: String!
  spotifyId: String!
}

type ArtistsPaginatedType {
  items: [ArtistType]
  page: Int
  pages: Int
  total: Int
  hasNext: Boolean
  hasPrev: Boolean
  q: String
}

type WritersPaginatedType {
  items: [WriterType]
  page: Int
  pages: Int
  total: Int
  hasNext: Boolean
  hasPrev: Boolean
  q: String
}

type Mutation {
  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}